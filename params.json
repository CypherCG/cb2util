{"name":"cb2util","google":"","body":"cb2util - CodeBreaker PS2 File Utility\r\n======================================\r\n\r\ncb2util was made to utilize different file formats of CodeBreaker PS2.\r\n\r\nIt currently supports:\r\n\r\n- Code saves (v7 and v8+/Day1)\r\n- \"cheats\" files (v7+)\r\n- PCB files (upgrades/homebrew/etc)\r\n\r\nThe features are:\r\n\r\n- extract (and decrypt) all cheats from code saves and \"cheats\" files\r\n- compile your own code saves and \"cheats\" files\r\n- encrypt or decrypt PCB files\r\n- convert PCB files into ELF files\r\n- check digital signature on code saves and PCB files\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nThe easiest and fastest way to get cb2util is to download the pre-built binaries\r\nfor Windows or Linux from the [Downloads] site.\r\n\r\nIf you want to build cb2util from source, simply run:\r\n\r\n    $ git clone --recursive git://github.com/mlafeldt/cb2util.git\r\n    $ cd cb2util/\r\n    $ make\r\n    $ make install\r\n\r\nCMake is supported too:\r\n\r\n    $ mkdir build\r\n    $ cd build/\r\n    $ cmake ..\r\n    $ make\r\n    $ make install\r\n\r\nIn case your system lacks `elf.h`, you can install it this way:\r\n\r\n    $ curl https://raw.github.com/gist/3885346/elf.h | sudo tee /usr/local/include/elf.h\r\n\r\n\r\nUsage\r\n-----\r\n\r\nAs cb2util is a command-line application, you have to pass arguments to it.\r\n\r\nUsing the `--help` option will display the following text:\r\n\r\n    $ cb2util --help\r\n    usage: cb2util [--version] [--help] <command> [<args>]\r\n\r\n    The available commands are:\r\n        cbc\r\n        cheats\r\n        pcb\r\n\r\n    Try 'cb2util help <command>' for more information.\r\n\r\nAs written above, you must specify the command to use followed by its arguments.\r\nThere's one command for each of the supported file formats, e.g. `cbc` for code\r\nsaves. To learn how a command is supposed to work, run `cb2util help <command>`.\r\n\r\nBelow are some notes and examples concerning the different file formats.\r\n\r\n\r\n### Code saves (v7 and v8+/Day1)\r\n\r\nFile extension: `*.cbc`\r\n\r\nCode saves (also known as Day1 or CBC files) store cheat codes that can be added\r\nto your CodeBreaker's code list. While older code saves for CB v7 are only\r\nencrypted, newer files for CB v8+ and CB Day1 are digitally signed as well. The\r\nlatter is the reason why you need a hacked CB in order to use code saves compiled\r\nwith cb2util (search the Web for _CodeBreaker RSA fix_).\r\n\r\n    usage: cb2util cbc [-d[mode] | -v] <file>...\r\n       or: cb2util cbc -7 [-d[mode]] <file>...\r\n       or: cb2util cbc [-b <banner>] -c <infile> <outfile>...\r\n       or: cb2util cbc -7 -c <infile> <outfile>...\r\n\r\n        no option\r\n            extract cheats\r\n\r\n        -d[mode], --decrypt[=mode]\r\n            decrypt extracted cheats\r\n            mode can be \"auto\" (default) or \"force\"\r\n\r\n        -v, --verify\r\n            verify RSA signature\r\n\r\n        -c, --compile\r\n            compile text to CBC file\r\n\r\n        -b, --banner <banner>\r\n            custom banner inserted into compiled CBC v8+ files\r\n\r\n        -7\r\n            files are in CBC v7 format\r\n\r\nExamples:\r\n\r\nExtract cheats from mgs3.cbc and print them to screen:\r\n\r\n    $ cb2util cbc mgs3.cbc\r\n\r\nExtract cheats, decrypt encrypted cheats, and print them to screen:\r\n\r\n    $ cb2util cbc --decrypt mgs3.cbc\r\n\r\nSame as previous example, but force decryption of _all_ cheats:\r\n\r\n    $ cb2util cbc --decrypt=force mgs3.cbc\r\n\r\nCheck digital signature of re4.cbc:\r\n\r\n    $ cb2util cbc --verify re4.cbc\r\n\r\nExtract and decrypt cheats from v7 code save re4.cbc, write them to re4.txt:\r\n\r\n    $ cb2util cbc --decrypt -7 re4.cbc > re4.txt\r\n\r\nCompile cheats in mygame.txt to code save for CB v8+:\r\n\r\n    $ cb2util cbc --compile mygame.txt /path/to/cbc\r\n\r\nCompile cheats in mygame.txt to code save for CB v7:\r\n\r\n    $ cb2util cbc --compile -7 mygame.txt /path/to/cbc\r\n\r\nNote that the format of the text file to be compiled is described below.\r\n\r\n\r\n### \"cheats\" files\r\n\r\nThe \"cheats\" file is CodeBreaker's internal code database. It is usually saved\r\nto memory card (`mc0:/PCB/cheats`) and updated every time the code list is\r\nchanged.\r\n\r\n    usage: cb2util cheats [-d[mode]] <file>...\r\n       or: cb2util cheats -c <infile> <outfile>...\r\n\r\n        no option\r\n            extract cheats\r\n\r\n        -d[mode], --decrypt[=mode]\r\n            decrypt extracted cheats\r\n            mode can be \"auto\" (default) or \"force\"\r\n\r\n        -c, --compile\r\n            compile text to cheats file\r\n\r\nExamples:\r\n\r\nExtract all cheats from \"cheats\" file and print them to screen:\r\n\r\n    $ cb2util cheats /path/to/cheats\r\n\r\nSame as previous example, but write extracted cheats to cheats.txt:\r\n\r\n    $ cb2util cheats /path/to/cheats > cheats.txt\r\n\r\nExtract all cheats, decrypt encrypted cheats, and print them to screen:\r\n\r\n    $ cb2util cheats --decrypt /path/to/cheats\r\n\r\nSame as previous example, but force decryption of _all_ cheats:\r\n\r\n    $ cb2util cheats --decrypt=force /path/to/cheats\r\n\r\nCompile cheats in mygames.txt to \"cheats\" file:\r\n\r\n    $ cb2util cheats --compile mygames.txt /path/to/cheats\r\n\r\nYou can use your own \"cheats\" file with CodeBreaker in just a few steps:\r\n\r\n1. create a text file containing your cheats; the format is described below\r\n2. invoke cb2util to compile the text file to a \"cheats\" file\r\n3. use your favorite method to transfer the file to `mc0:/PCB/cheats`\r\n4. start CodeBreaker to see your cheats ready to be used\r\n\r\n\r\n#### Text file format\r\n\r\nTo compile code saves and \"cheats\" files, cb2util uses [libcheats] for parsing\r\ncheat codes in text format. The format of the text file is quite simple:\r\n\r\n    \"Game title 1\"\r\n    Cheat description 1\r\n    Cheat code 1\r\n    Cheat code 2\r\n    Cheat description 2\r\n    Cheat code 1\r\n    Cheat code 2\r\n\r\n    \"Game title 2\"\r\n    etc.\r\n\r\nAlso, C++-style comments are allowed; all text beginning with a `//` sequence to\r\nthe end of the line is ignored.\r\n\r\nExample:\r\n\r\n    \"TimeSplitters\"\r\n    // some senseless comment\r\n    Mastercode\r\n    902D51F8 0C0B95F6\r\n    Invincible\r\n    203C8728 00000001\r\n\r\n\r\n### PCB files\r\n\r\nFile extension: `*.bin`\r\n\r\nPCB files are encrypted and digitally signed binaries that can be executed by\r\nthe CodeBreaker PS2. In theory, this could be any application; we've seen\r\nupgrades and homebrew so far.\r\n\r\n    usage: cb2util pcb [-s] <infile> <outfile>...\r\n       or: cb2util pcb -e <infile> <outfile>...\r\n       or: cb2util pcb -v <file>...\r\n\r\n        no option\r\n            encrypt/decrypt file\r\n\r\n        -s, --strip\r\n            strip RSA signature\r\n\r\n        -e, --elf\r\n            convert into ELF file\r\n\r\n        -v, --verify\r\n            verify RSA signature\r\n\r\nNote: PCB files are encrypted with a symmetric cipher (RC4) and cb2util actually\r\ndoesn't care if it's encrypting or decrypting.\r\n\r\nExamples:\r\n\r\nDecrypt pelican.bin to pelican.raw:\r\n\r\n    $ cb2util pcb pelican.bin pelican.raw\r\n\r\nDecrypt pelican.bin to pelican.raw and strip RSA signature:\r\n\r\n    $ cb2util pcb --strip pelican.bin pelican.raw\r\n\r\nConvert pelican.bin into the ELF file pelican.elf:\r\n\r\n    $ cb2util pcb --elf pelican.bin pelican.elf\r\n\r\nCheck RSA signature of pelican.bin:\r\n\r\n    $ cb2util pcb --verify pelican.bin\r\n\r\n\r\n### Game saves\r\n\r\nFile extension: `*.cbs`\r\n\r\nComming soon... ;)\r\n\r\n\r\nDisclaimer\r\n----------\r\n\r\nTHIS PROGRAM IS NOT LICENSED, ENDORSED, NOR SPONSORED BY SONY COMPUTER\r\nENTERTAINMENT, INC. NOR PELICAN ACCESSORIES, INC.\r\nALL TRADEMARKS ARE PROPERTY OF THEIR RESPECTIVE OWNERS.\r\n\r\n* cb2util is licensed under the terms of the MIT License. See [LICENSE] file.\r\n* The code in `arcfour.c` is licensed under the terms of the FreeBSD license,\r\n  which is believed to be compatible with the MIT license.\r\n* The SHA-1 implementation is placed in the public domain.\r\n* [libcheats] is licensed under the terms of the MIT License. See [LICENSE] file.\r\n* The license of [libbig_int] says that it can be redistributed/modified freely.\r\n* [zlib] has its own permissive free software license.\r\n* [Sharness] and all tests are licensed under the terms of the GNU General\r\n  Public License version 2 or higher. See file [COPYING] for full license text.\r\n\r\n\r\nSpecial Thanks\r\n--------------\r\n\r\n* Alexander Valyalkin for his great [libbig_int] library.\r\n* Peter C. Gutmann and Paul Rubin for the fast implementation of SHA-1.\r\n* Vector for making PS2 Save Builder and saving me some time.\r\n* Gtlcpimp who has awakened my interest in cb2util again and provided valuable\r\n  information on the \"cheats\" compression.\r\n* Greets to all the people that contribute to our code hacking community!\r\n\r\n\r\nContact\r\n-------\r\n\r\n* Web: <http://mlafeldt.github.com/cb2util>\r\n* Mail: <mathias.lafeldt@gmail.com>\r\n* Twitter: [@mlafeldt](https://twitter.com/mlafeldt)\r\n\r\n\r\n[COPYING]: https://github.com/mlafeldt/cb2util/blob/master/test/COPYING\r\n[Downloads]: https://github.com/mlafeldt/cb2util/downloads\r\n[LICENSE]: https://github.com/mlafeldt/cb2util/blob/master/LICENSE\r\n[Sharness]: http://mlafeldt.github.com/sharness\r\n[libbig_int]: https://github.com/mlafeldt/libbig_int\r\n[libcheats]: http://mlafeldt.github.com/libcheats\r\n[zlib]: http://www.zlib.net\r\n","tagline":"CodeBreaker PS2 File Utility","note":"Don't delete this file! It's used internally to help with page regeneration."}